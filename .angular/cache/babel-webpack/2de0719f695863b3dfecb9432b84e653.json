{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n    } //submits a register post to an api from conduity that acts as a temp place to submit\n    // idk if cors is enable on that site. the return of post should be a currentUserInterface type model\n    //packed in a json object called user. this matches with model of AuthResponseInterface -- check doc for model\n\n\n    register(data) {\n      const url = environment.apiUrl + '/users';\n      return this.http.post(url, data).pipe(map(response => response.user));\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}