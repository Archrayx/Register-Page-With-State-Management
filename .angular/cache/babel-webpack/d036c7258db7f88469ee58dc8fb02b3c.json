{"ast":null,"code":"import { registerFailureAction, registerSuccessAction } from '../register.action';\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\nimport { registerAction } from '../register.action';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/app/services/auth.service\";\nimport * as i3 from \"../../../../services/persistance.service\";\nimport * as i4 from \"@angular/router\";\nexport let RegisterEffect = /*#__PURE__*/(() => {\n  class RegisterEffect {\n    //map returns something, tap doesnt return something\n    constructor(actions$, authService, persistanceService, router) {\n      this.actions$ = actions$;\n      this.authService = authService;\n      this.persistanceService = persistanceService;\n      this.router = router;\n      this.register$ = createEffect(() => this.actions$.pipe(ofType(registerAction), switchMap(({\n        request\n      }) => {\n        return this.authService.register(request).pipe(map(currentUser => {\n          this.persistanceService.set('accessToken', currentUser.token);\n          return registerSuccessAction({\n            currentUser\n          });\n        }), catchError(errorResponse => {\n          return of(registerFailureAction({\n            errors: errorResponse.error.errors\n          }));\n        }));\n      }))); //will explain what it does. to put it simply its cause a chain of functions that activates\n      //when ofType registerAction action occurs. it takes request response values(RgisterActionInterface)\n      //and throws it into our auth service to register the account. after which, the returned observable\n      //item should be of type currentUser. it then triggers registerSuccessAction.\n      //if it fails catchError pipe execute to throw RegisterFailureAction\n\n      this.redirectAfterSubmit$ = createEffect(() => this.actions$.pipe(ofType(registerSuccessAction), tap(() => {\n        this.router.navigateByUrl('/home');\n      })), {\n        dispatch: false\n      });\n    }\n\n  }\n\n  RegisterEffect.ɵfac = function RegisterEffect_Factory(t) {\n    return new (t || RegisterEffect)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.PersistanceService), i0.ɵɵinject(i4.Router));\n  };\n\n  RegisterEffect.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RegisterEffect,\n    factory: RegisterEffect.ɵfac\n  });\n  return RegisterEffect;\n})();","map":null,"metadata":{},"sourceType":"module"}